#!/bin/bash
#
# [Ansible Role]
#
# GitHub:   https://github.com/Admin9705/PlexGuide.com-The-Awesome-Plex-Server
# Author:   Admin9705 & Deiteq & FlickerRate
# URL:      https://plexguide.com
#
# PlexGuide Copyright (C) 2018 PlexGuide.com
# Licensed under GNU General Public License v3.0 GPL-3 (in short)
#
#   You may copy, distribute and modify the software as long as you track
#   changes/dates in source files. Any modifications to our software
#   including (via compiler) GPL-licensed code must also be made available
#   under the GPL along with build & install instructions.
#
#################################################################################
---


- name: Set linuxserver/sabnzbd
  set_fact: 
    image: "linuxserver/sabnzbd"
  when: result.user_input == "1"

- name: sabnzbd/sabnzbd
  set_fact: 
    image: "sabnzbd/sabnzbd"
  when: result.user_input == "2"

- name: Create SAB download directory
  file: "path=/mnt/sab/ state=directory mode=0775 owner=1000 group=1000 recurse=true"

- name: Check sabnzbd.ini exists
  stat:
    path: "/opt/appdata/sabnzbd/sabnzbd.ini"
  register: sabnzbd_ini

- name: Deploy SABNZBD Container
  docker_container:
    name: sabnzbd
    image: "linuxserver/sabnzbd"
    pull: yes
    published_ports:
      - "{{ports.stdout}}{{extport}}:{{intport}}"
    volumes:
      - /opt/appdata/sabnzbd:/config
      - "{{path.stdout}}/sab/complete:/complete"
      - "{{path.stdout}}/sab/incomplete:/incomplete"
      - "{{path.stdout}}/sab/nzb:/nzb"
      - "{{path.stdout}}/sab/admin:/admin"
      - /mnt/unionfs:/unionfs
      - /etc/localtime:/etc/localtime:ro
    cpu_shares: 256
    env:
      PUID: 1000
      PGID: 1000
    restart_policy: always
    state: started
    networks:
      - name: plexguide
        aliases:
          - sabnzbd
    labels:
      traefik.enable: "true"
      traefik.frontend.redirect.entryPoint: "https"
      traefik.frontend.rule: "Host:sabnzbd.{{domain.stdout}}"
      traefik.port: "{{extport}}"

- name: Path for .ini
  wait_for:
    path: "/opt/appdata/sabnzbd/sabnzbd.ini"
    state: present
  when: sabnzbd_ini.stat.exists == False

- name: "Wait 10 Seconds"
  wait_for:
    timeout: 10
  when: sabnzbd_ini.stat.exists == False

- name: Customize sabnzbd_ini
  docker_container:
    name: sabnzbd
    state: stopped
  when: sabnzbd_ini.stat.exists == False

- replace:
    path: /opt/appdata/sabnzbd/sabnzbd.ini
    regexp: "complete_dir = Downloads/complete"
    replace: "complete_dir = /complete"
  when: sabnzbd_ini.stat.exists == False

- replace:
    path: /opt/appdata/sabnzbd/sabnzbd.ini
    regexp: "host_whitelist ="
    replace: "host_whitelist = sabnzbd.{{domain.stdout}},"
  when: sabnzbd_ini.stat.exists == False

- replace:
    path: /opt/appdata/sabnzbd/sabnzbd.ini
    regexp: "download_dir = Downloads/incomplete"
    replace: "download_dir = /incomplete"
  when: sabnzbd_ini.stat.exists == False

- replace:
    path: /opt/appdata/sabnzbd/sabnzbd.ini
    regexp: nzb_backup_dir = ""
    replace: "nzb_backup_dir = /nzb"
  when: sabnzbd_ini.stat.exists == False

- replace:
    path: /opt/appdata/sabnzbd/sabnzbd.ini
    regexp: "admin_dir = admin"
    replace: "admin_dir = /admin"
  when: sabnzbd_ini.stat.exists == False

- replace:
    path: /opt/appdata/sabnzbd/sabnzbd.ini
    regexp: "direct_unpack = 0"
    replace: "direct_unpack = 1"
  when: sabnzbd_ini.stat.exists == False

- replace:
    path: /opt/appdata/sabnzbd/sabnzbd.ini
    regexp: "ignore_samples = 0"
    replace: "ignore_samples = 1"
  when: sabnzbd_ini.stat.exists == False

## remove unwanted extensions
- replace:
    path: /opt/appdata/sabnzbd/sabnzbd.ini
    regexp: "unwanted_extensions = ,"
    replace: "unwanted_extensions = exe, com, bat, sh"
  when: sabnzbd_ini.stat.exists == False

## ignore and cleanup the following files
- replace:
    path: /opt/appdata/sabnzbd/sabnzbd.ini
    regexp: "cleanup_list = ,"
    replace: "cleanup_list = nfo, exe, com, bat, txt, doc, xls, xlxs, docx, doc, jpg, jeg, gif, png"
  when: sabnzbd_ini.stat.exists == False

- replace:
    path: /opt/appdata/sabnzbd/sabnzbd.ini
    regexp: "action_on_unwanted_extensions = 0"
    replace: "action_on_unwanted_extensions = 2"
  when: sabnzbd_ini.stat.exists == False

## aborts encrypted rar rather than pausing
- replace:
    path: /opt/appdata/sabnzbd/sabnzbd.ini
    regexp: "pause_on_pwrar = 1"
    replace: "pause_on_pwrar = 2"
  when: sabnzbd_ini.stat.exists == False

## try a new nzb if it fails
- replace:
    path: /opt/appdata/sabnzbd/sabnzbd.ini
    regexp: "new_nzb_on_failure = 0"
    replace: "new_nzb_on_failure = 1"
  when: sabnzbd_ini.stat.exists == False

## replace dots with space
- replace:
    path: /opt/appdata/sabnzbd/sabnzbd.ini
    regexp: "replace_dots = 0"
    replace: "replace_dots = 1"
  when: sabnzbd_ini.stat.exists == False

## flat_unpack
- replace:
    path: /opt/appdata/sabnzbd/sabnzbd.ini
    regexp: "flat_unpack = 0"
    replace: "flat_unpack = 1"
  when: sabnzbd_ini.stat.exists == False

- name: Restart Container
  docker_container:
    name: sabnzbd
    state: started
  when: sabnzbd_ini.stat.exists == False
