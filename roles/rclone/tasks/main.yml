#########################################################################
# Title:         Cloudbox: Rclone Role                                  #
# Author(s):     L3uddz, Desimaniac                                     #
# URL:           https://github.com/cloudbox/cloudbox                   #
# --                                                                    #
#         Part of the Cloudbox project: https://cloudbox.rocks          #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: Verify that Rclone version was specified
  fail: msg="You must specify the Rclone version in settings.yml"
  when: (
      (rclone.version is undefined)
      or
      (rclone.version is none)
      or
      (rclone.version | trim == '')
      )

- name: Ensure unzip is installed
  apt:
    name: unzip
    state: present

- name: Create rclone directories
  file: "path={{item}} state=directory mode=0775 owner={{user}} group={{user}} recurse=yes"
  with_items:
    - "/home/{{user}}/.config"
    - "/home/{{user}}/.config/rclone"
    - /opt/scripts/rclone

- name: Touch or create blank rclone.conf file
  file:
    path: "/home/{{user}}/.config/rclone/rclone.conf"
    state: touch
    mode: 0775
    owner: "{{user}}"
    group: "{{user}}"

- name: Cleanup rclone tmp path
  shell: rm -rf /tmp/rclone-*-linux-amd64
  args:
    warn: no

- name: Build version tag
  set_fact: rclone_version_tag="{{ ((rclone.version == 'latest') | ternary('current', 'v{{ "%.2f"|format(rclone.version) }}')) }}"

- name: "Unarchive rclone version: {{rclone_version_tag}}"
  unarchive:
    src: "https://downloads.rclone.org/{{ '' if rclone.version == 'latest' else rclone_version_tag + '/' }}rclone-{{ rclone_version_tag }}-linux-amd64.zip"
    dest: /tmp
    copy: no
    validate_certs: no

- name: Find rclone tmp dir
  shell: ls -d /tmp/rclone-*-linux-amd64
  register: rclone_tmp_dir

- name: Copy binary to /usr/bin/rclone
  copy:
    src: "{{ rclone_tmp_dir.stdout }}/rclone"
    dest: "/usr/bin/rclone"
    mode: 0755
    owner: root
    group: root

- name: Make dir for local manpages
  file:
    path: '/usr/local/share/man/man1'
    state: directory
    mode: 0775
    owner: root
    group: root

- name: Copy manpage
  copy:
    src: "{{ rclone_tmp_dir.stdout }}/rclone.1"
    dest: /usr/local/share/man/man1/rclone.1
    mode: 0644
    owner: root
    group: root

- name: Install manpage
  shell: mandb
  changed_when: false

- name: Get rclone version
  shell: rclone --version | head -n 1 | awk '{ print substr($2, 2, 4) }'
  register: rclone_version
  ignore_errors: yes

- name: "Display rclone version"
  debug:
    msg: "rclone version {{rclone_version.stdout}} installed."

- name: Check mount-local.sh exists
  stat:
    path: "/opt/scripts/rclone/mount-local.sh"
    get_attributes: false
    get_checksum: false
    get_md5: false
    get_mime: false
  register: mount_local_script

- name: Import mount-local.sh
  copy:
    src: "mount-cloud.sh"
    dest: "/opt/scripts/rclone/mount-local.sh"
    owner: "{{user}}"
    group: "{{user}}"
    mode: 0775
    force: yes
  when: mount_local_script.stat.exists == False

- name: Check mount-cloud.sh exists
  stat:
    path: "/opt/scripts/rclone/mount-cloud.sh"
    get_attributes: false
    get_checksum: false
    get_md5: false
    get_mime: false
  register: mount_cloud_script

- name: Import mount-cloud.sh
  copy:
    src: "mount-cloud.sh"
    dest: "/opt/scripts/rclone/mount-cloud.sh"
    owner: "{{user}}"
    group: "{{user}}"
    mode: 0775
    force: yes
  when: mount_cloud_script.stat.exists == False

- name: Check mount-local.service exists
    stat:
      path: "/etc/systemd/system/mount-local.service"
    register: unionfs_service

- name: Stop existing mount-local service
    systemd: state=stopped name=mount-local
    when: mount_local_service.stat.exists

- name: Import mount-local.service
    template:
      src: mount-local.service.js2
      dest: /etc/systemd/system/mount-local.service
      force: yes
    when: unionfs_service.stat.exists == False

- name: Start mount-local service
    systemd: state=started name=mount-local daemon_reload=yes enabled=yes

- name: Check mount-cloud.service exists
    stat:
      path: "/etc/systemd/system/mount-cloud.service"
    register: unionfs_service

- name: Stop existing mount-cloud service
    systemd: state=stopped name=mount-cloud
    when: mount_cloud_service.stat.exists

- name: Import mount-cloud.service
    template:
      src: mount-cloud.service.js2
      dest: /etc/systemd/system/mount-cloud.service
      force: yes
    when: unionfs_service.stat.exists == False

- name: Start mount-cloud service
    systemd: state=started name=mount-cloud daemon_reload=yes enabled=yes
