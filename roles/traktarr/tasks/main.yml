#########################################################################
# Title:         Cloudbox: Traktarr Role                                #
# Author(s):     L3uddz, Desimaniac                                     #
# URL:           https://github.com/cloudbox/cloudbox                   #
# --                                                                    #
#         Part of the Cloudbox project: https://cloudbox.rocks          #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: Check if traktarr service exists
  stat:
    path: "/etc/systemd/system/traktarr.service"
  register: traktarr_service

- name: Stop existing traktarr service
  systemd: state=stopped name=traktarr
  when: traktarr_service.stat.exists

- name: Create traktarr directories
  file: "path={{item}} state=directory mode=0775 owner={{user}} group={{user}} recurse=yes"
  with_items:
    - /opt/traktarr

- name: Clone traktarr
  git:
    repo: https://github.com/l3uddz/traktarr/
    dest: /opt/traktarr
    version: master
    force: yes
  become: yes
  become_user: "{{user}}"

- name: Install pip requirements
  pip:
    requirements: /opt/traktarr/requirements.txt
    executable: pip3

- name: Check if traktarr config exists
  stat:
    path: "/opt/traktarr/config.json"
  register: traktarr_config

- name: "Check if sonarr exists"
  stat:
    path: "/opt/sonarr/app/config.xml"
  register: sonarr_config
  when: not traktarr_config.stat.exists

- name: "When sonarr exists, add api key and port to traktarr config"
  block:

  - name: Pull sonarr api key
    xml:
      path: "/opt/sonarr/app/config.xml"
      xpath: /Config/ApiKey
      content: text
    register: xmlapi

  - name: Pull sonarr port
    xml:
      path: "/opt/sonarr/app/config.xml"
      xpath: /Config/Port
      content: text
    register: xmlport

  - name: Set sonarr facts
    set_fact:
      sonarr_api_key: "{{ xmlapi.matches[0].ApiKey }}"
      sonarr_profile: "HD-720p"
      sonarr_port: "{{ xmlport.matches[0].Port }}"
      sonarr_root: "TV Shows"

  when: (not traktarr_config.stat.exists) and (sonarr_config.stat.exists)

- name: "Check if radarrpq exists"
  stat:
    path: "/opt/radarrpq/app/config.xml"
  register: radarrpq_config
  when: not traktarr_config.stat.exists

- name: "When radarrpq exists, add api key to traktarr config"
  block:

  - name: Pull radarrpq api key
    xml:
      path: "/opt/radarrpq/app/config.xml"
      xpath: /Config/ApiKey
      content: text
    register: xmlapi

  - name: Pull radarrpq port
    xml:
      path: "/opt/radarrpq/app/config.xml"
      xpath: /Config/Port
      content: text
    register: xmlport

  - name: Set radarrpq facts
    set_fact:
      radarr_api_key: "{{ xmlapi.matches[0].ApiKey }}"
      radarr_profile: "Any"
      radarr_port: "{{ xmlport.matches[0].Port }}"
      radarr_root: "Poor Quality"

  when: (not traktarr_config.stat.exists) and (radarrpq_config.stat.exists)

- name: "Check if radarr exists"
  stat:
    path: "/opt/radarr/app/config.xml"
  register: radarr_config
  when: (not radarrpq_config.stat.exists)

- name: "When radarr exists, add api key to traktarr config"
  block:

  - name: Pull radarr api key
    xml:
      path: "/opt/radarr/app/config.xml"
      xpath: /Config/ApiKey
      content: text
    register: xmlapi

  - name: Pull radarr port
    xml:
      path: "/opt/radarr/app/config.xml"
      xpath: /Config/Port
      content: text
    register: xmlport

  - name: Set radarr facts
    set_fact:
      radarr_api_key: "{{ xmlapi.matches[0].ApiKey }}"
      radarr_profile: "HD-1080p"
      radarr_port: "{{ xmlport.matches[0].Port }}"
      radarr_root: "YIFY"

  when: (not radarrpq_config.stat.exists) and (not traktarr_config.stat.exists) and (radarr_config.stat.exists)

- name: Import default config
  template:
    src: config.json.js2
    dest: /opt/traktarr/config.json
    owner: "{{user}}"
    group: "{{user}}"
    mode: 0775
    force: yes
  when: not traktarr_config.stat.exists

- name: Set traktarr.py as executable
  file:
    path: /opt/traktarr/traktarr.py
    owner: "{{user}}"
    group: "{{user}}"
    mode: a+x

- name: Set directory permissions
  file: "path=/opt/traktarr state=directory owner={{user}} group={{user}} recurse=yes"

- name: "Create /usr/local/bin symlink"
  file:
    src: "/opt/traktarr/traktarr.py"
    dest: "/usr/local/bin/traktarr"
    state: link

- name: Import traktarr service
  template:
    src: traktarr.service.js2
    dest: /etc/systemd/system/traktarr.service
    force: yes
  when: not traktarr_service.stat.exists

- name: Load traktarr service
  systemd: state=started name=traktarr daemon_reload=yes enabled=yes
