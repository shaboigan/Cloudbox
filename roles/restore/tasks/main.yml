#########################################################################
# Title:         Cloudbox: Restore Role                                 #
# Author(s):     L3uddz, Desimaniac                                     #
# URL:           https://github.com/cloudbox/cloudbox                   #
# --                                                                    #
#         Part of the Cloudbox project: https://cloudbox.rocks          #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: "Check if 'cloudbox.tar' exists"
  stat:
    path: "{{backup.tar_dest}}/cloudbox.tar"
    get_attributes: false
    get_checksum: false
    get_md5: false
    get_mime: false
  register: cloudbox_tar1

- name: Fail when no backup tool has been enabled or when no local backup tar exists
  fail: msg="You must enable either rclone or rsync, in the backup settings, to perform a restore."
  when: not (cloudbox_tar1.stat.exists or backup.use_rclone or backup.use_rsync)

- name: Fail when both backup tools are enabled
  fail: msg="You can only have either rclone enabled or rsync enabled, but not both."
  when: (not cloudbox_tar1.stat.exists) and (backup.use_rclone and backup.use_rsync)

- name: Install rclone
  include_role:
    name: rclone
  when: (not cloudbox_tar1.stat.exists) and (backup.use_rclone)

- name: Test rclone remote
  shell: "rclone lsd {{backup.rclone_dest}}"
  register: rclone_test
  failed_when: rclone_test.rc > 3
  when: (not cloudbox_tar1.stat.exists) and (backup.use_rclone)

- name: "Fail when rclone is misconfigured."
  fail: msg="The rclone remote is misconfigured - You must place a valid 'rclone.conf' file in '{{playbook_dir}}' (or setup Rclone via 'rclone config') and verify that the 'rclone_dest' in settings is valid."
  when: (not cloudbox_tar1.stat.exists) and ((backup.use_rclone) and (rclone_test.rc > 0))

- name: "Check if '{{backup.tar_dest}}' exists"
  stat:
    path: "{{backup.tar_dest}}"
    get_attributes: false
    get_checksum: false
    get_md5: false
    get_mime: false
  register: backup_location

- name: "Create backup location '{{backup.tar_dest}}'"
  file: path={{backup.tar_dest}} state=directory mode=0775 owner={{user}} group={{user}} recurse=yes
  when: not backup_location.stat.exists

- name: "Fetch 'cloudbox.tar' from '{{backup.rclone_dest}}'"
  command: "rclone copy '{{backup.rclone_dest}}/cloudbox.tar' '{{backup.tar_dest}}' --stats=30s -v --transfers=2 --log-file='{{playbook_dir}}/restore_rclone.log'"
  become: yes
  become_user: "{{user}}"
  when: (not cloudbox_tar1.stat.exists) and (backup.use_rclone)

- name: "Fetch 'cloudbox.tar' from {{backup.rsync_dest}}"
  synchronize:
    src: "{{backup.rsync_dest}}/cloudbox.tar"
    dest: "{{backup.tar_dest}}/"
    rsync_opts:
      - "--log-file='{{playbook_dir}}/restore_rsync.log'"
  become: yes
  become_user: "{{user}}"
  when: (not cloudbox_tar1.stat.exists) and (backup.use_rsync)

- name: "Check if 'cloudbox.tar' exists"
  stat:
    path: "{{backup.tar_dest}}/cloudbox.tar"
    get_attributes: false
    get_checksum: false
    get_md5: false
    get_mime: false
  register: cloudbox_tar2
  when: (not cloudbox_tar1.stat.exists)

- name: "Fail if 'cloudbox.tar' does not exist"
  fail: msg="There must have been an issue retrieving the 'cloudbox.tar' file as it does not exist at '{{backup.tar_dest}}/cloudbox.tar'"
  when: (not cloudbox_tar1.stat.exists) and (not cloudbox_tar2.stat.exists)

- name: "Wait for 10 seconds before unarchiving"
  wait_for:
    timeout: 10

- name: "Create '/opt' directory"
  file: "path={{item}} state=directory mode=0775 owner={{user}} group={{user}}"
  with_items:
    - /opt

- name: "Unarchive cloudbox.tar to /opt"
  shell: "tar -xf '{{backup.tar_dest}}/cloudbox.tar' -C /opt ."
  register: unarchive

- name: "Remove 'cloudbox.tar' when `keep_local_copy` is disabled."
  file:
    path: "{{backup.tar_dest}}/cloudbox.tar"
    state: absent
  when: not backup.keep_local_copy

- debug:
    msg: Finished restoring the backup. You are now ready to install Cloudbox.
  when: unarchive is success
