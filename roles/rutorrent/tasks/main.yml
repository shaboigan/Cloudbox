#########################################################################
# Title:         Cloudbox: ruTorrent Role                               #
# Author(s):     L3uddz, Desimaniac, Horjulf                            #
# URL:           https://github.com/cloudbox/cloudbox                   #
# Docker Image:  horjulf/rutorrent-autodl                               #
# --                                                                    #
#         Part of the Cloudbox project: https://cloudbox.rocks          #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: "Set DNS Record on CloudFlare"
  include_role:
    name: cloudflare
  vars:
    subdomain: rutorrent

- name: Stop and remove any existing container
  docker_container:
    name: rutorrent
    state: absent

- name: Create rutorrent directory
  file: "path={{item}} state=directory mode=0775 owner={{user}} group={{user}} recurse=yes"
  with_items:
    - /opt/rutorrent
    - "{{downloads.torrents}}/rutorrent"
    - "{{downloads.torrents}}/rutorrent/completed"
    - "{{downloads.torrents}}/rutorrent/incoming"
    - "{{downloads.torrents}}/rutorrent/watched"

- name: Check if rtorrent.rc exists
  stat:
    path: "/opt/rutorrent/rtorrent/rtorrent.rc"
  register: rtorrent_rc

- name: Check if rtorrent.rc requires upgrading
  set_fact:
    standard_settings_needs_upgrading: "{{ (lookup('file', '/opt/rutorrent/rtorrent/rtorrent.rc')) is search('peer_exchange') }}"
    subdir_settings_exist: "{{ (lookup('file', '/opt/rutorrent/rtorrent/rtorrent.rc')) is search('/downloads/torrents/rutorrent/completed/') }}"
  when: rtorrent_rc.stat.exists

- name: Backup previous rtorrent.rc file
  shell: mv '/opt/rutorrent/rtorrent/rtorrent.rc' '/opt/rutorrent/rtorrent/rtorrent.rc.bak'
  ignore_errors: yes
  when: (rtorrent_rc.stat.exists) and (standard_settings_needs_upgrading|default(false,true))

- name: Check if plugins.ini exists
  stat:
    path: "/opt/rutorrent/rutorrent/settings/plugins.ini"
  register: plugins_ini

- name: Replace plugins.ini with customized one
  copy:
    src: plugins.ini
    dest: "/opt/rutorrent/rutorrent/settings/plugins.ini"
    owner: "{{user}}"
    group: "{{user}}"
    mode: 0775
    force: yes
  when: plugins_ini.stat.exists

- name: Create and start container
  docker_container:
    name: rutorrent
    image: horjulf/rutorrent-autodl
    pull: yes
    env:
      PUID: "{{uid}}"
      PGID: "{{gid}}"
    network_mode: "container:nordvpn"
    labels:
      traefik.enable: "true"
      traefik.backend: "rutorrent"
      traefik.frontend.redirect.entryPoint: "https"
      traefik.frontend.rule: "Host:rutorrent.{{domain}}"
      traefik.port: "80"
      traefik.docker.network: "cloudbox"
      "com.github.cloudbox.cloudbox_managed": "true"
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "/opt/rutorrent:/config"
      - "{{downloads.torrents}}:/data"
      - "/opt/scripts:/scripts"
      - "/mnt:/mnt"
      - "{{downloads.torrents}}/rutorrent:/downloads"
    purge_networks: yes
    restart_policy: always
    stop_timeout: 300
    state: started

# Done for new setups (or setups requiring updating for updated rtorrent version).
- name: Standard Settings Tweaks
  include_tasks: "rutorrent_standard_settings.yml"
  when: (not continuous_integration)
        and
        ((not rtorrent_rc.stat.exists) or (standard_settings_needs_upgrading))

# Done for new setups (or setups requiring updating for updated rtorrent version).
- name: Subdir Settings Tweaks
  include_tasks: "rutorrent_subdir_settings.yml"
  when: (not continuous_integration)
        and
        ((not rtorrent_rc.stat.exists) or (standard_settings_needs_upgrading and subdirs_settings_exist))

- name: Start container to apply changes
  docker_container:
    name: rutorrent
    state: started
  when: (not continuous_integration)
        and
        ((not rtorrent_rc.stat.exists) or (standard_settings_needs_upgrading))
